generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @map("_id")
  name           String?
  username       String?   @unique
  bio            String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  coverImage     String?
  profileImage   String?
  hashedPassword String?
  location       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  payments       Payment[]
  accounts       Account[]
  Session        Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id       String    @id @default(uuid()) @map("_id")
  name     String
  price    String
  rating   Float     @default(0)
  href     String
  imageSrc String
  colors   Color[]
  sizes    Size[]
  payments Payment[]
}

model Color {
  id            String  @id @default(uuid()) @map("_id")
  name          String
  class         String
  selectedClass String
  productId     String
  product       Product @relation(fields: [productId], references: [id])
}

model Size {
  id        String  @id @default(uuid()) @map("_id")
  name      String
  inStock   Boolean
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String   @id @default(uuid()) @map("_id")
  amount        Float
  currency      String
  paymentMethod String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
}
